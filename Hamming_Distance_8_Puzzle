import copy
import sys

inital_list = [[1,2,3], [0,8,4],[7,6,5]]

goal_list = [[1, 2, 3], [8,4,0], [7, 6, 5]]


graph = {}
parent = {}
visited_node = []
updated_list = None


class haming_8puzzle():
    global updated_list

    # print("updated list",updated_list)

    def create_list(self, nested_tupple):

        w = []
        for i in range(0, 3):
            a = list(nested_tupple[i])
            w.append(a)
        return w

    def create_tuple(self, nested_list):

        w = []
        for i in range(0, 3):
            a = tuple(nested_list[i])
            w.append(a)
        return tuple(w)

    def check_goal(self, test_list):
        if test_list == goal_list:
            for i in range(len(visited_node)):
                print("visited", visited_node[i])
            exit(0)

    # def solution(self, b):
    #     id = []
    #     while b != inital_list:
    #         print("yes",b,parent)
    #         id.append(b)
    #         k=parent[b]
    #         print(k)
    #         self.solution(k)
    #     id.append(inital_list)
    #     print("id",id)
    #     for i in range(len(id) - 1, -1, -1):
    #         print(id[i])
    #     print("visited",visited_node)
    #     exit(0)

    def hamming_distance(self, list, dis):
        global updated_list
        print("dissssssss", dis)
        count = 0
        print("llll", list)
        for i in range(len(list)):
            for j in range(len(list)):
                if list[i][j] != goal_list[i][j]:
                    count = count + 1

        print("count", count, dis)
        if count < dis:
            dis = count
            updated_list = list
            print("ss")
        return dis

    def method(self, copy_list):

        # case 1 "FOR CENTER CELL NODE=5"
        x = self.create_tuple(copy_list)
        graph[x] = []
        visited_node.append(x)
        dis = 10

        dup_list = copy.deepcopy(copy_list)
        if dup_list[1][1] == 0:
            # print("yes2", copy_list, visited_node)
            temp = dup_list[1][0]
            # print("temp",temp)                                     # left shift
            dup_list[1][0] = 0
            dup_list[1][1] = temp
            # print("yes2", dup_list, visited_node)
            # print("gyu", dup_list, copy_list)
            dis = self.hamming_distance(dup_list, dis)

            dup_list = copy.deepcopy(copy_list)
            # print("co1",copy_list)
            # print("dup_liat",dup_list)
            temp1 = dup_list[1][2]  # right shift
            dup_list[1][2] = 0
            dup_list[1][1] = temp1
            # print("gyu", dup_list, copy_list)
            dis = self.hamming_distance(dup_list, dis)

            dup_list = copy.deepcopy(copy_list)
            temp2 = dup_list[0][1]  # up shift
            dup_list[0][1] = 0
            dup_list[1][1] = temp2
            # print("gyu", dup_list, copy_list)
            dis = self.hamming_distance(dup_list, dis)

            dup_list = copy.deepcopy(copy_list)
            temp3 = dup_list[2][1]
            dup_list[2][1] = 0  # down shift
            dup_list[1][1] = temp3
            # print("gyu", dup_list, copy_list)
            dis = self.hamming_distance(dup_list, dis)

            graph[x].append(updated_list)
            # print("hi")
            c = self.create_tuple(updated_list)
            parent[c] = [x]
            # print(updated_list,c)
            visited_node.append(updated_list)
            self.check_goal(updated_list)

        # case -2   "FOR NODE 1"
        dup_list = copy.deepcopy(copy_list)
        if dup_list[0][0] == 0:
            temp1 = dup_list[0][1]  # right shift
            dup_list[0][1] = 0
            dup_list[0][0] = temp1
            dis = self.hamming_distance(dup_list, dis)

            dup_list = copy.deepcopy(copy_list)
            temp2 = dup_list[1][0]
            dup_list[1][0] = 0  # down shift
            dup_list[0][0] = temp2
            dis = self.hamming_distance(dup_list, dis)

            graph[x].append(updated_list)
            # print("hi")
            c = self.create_tuple(updated_list)
            parent[c] = [x]
            # print(updated_list,c)
            visited_node.append(updated_list)
            self.check_goal(updated_list)

        # case-3  "FOR NODE 2"
        dup_list = copy.deepcopy(copy_list)
        if dup_list[0][1] == 0:
            temp = dup_list[0][0]  # left shift
            dup_list[0][0] = 0
            dup_list[0][1] = temp
            dis = self.hamming_distance(dup_list, dis)

            dup_list = copy.deepcopy(copy_list)
            temp1 = dup_list[0][2]  # right shift
            dup_list[0][2] = 0
            dup_list[0][1] = temp1
            dis = self.hamming_distance(dup_list, dis)

            dup_list = copy.deepcopy(copy_list)
            temp2 = dup_list[1][1]
            dup_list[1][1] = 0  # down shift from a11
            dup_list[0][1] = temp2
            dis = self.hamming_distance(dup_list, dis)

            graph[x].append(updated_list)
            # print("hi")
            c = self.create_tuple(updated_list)
            parent[c] = [x]
            # print(updated_list,c)
            visited_node.append(updated_list)
            # print("v",visited_node)
            self.check_goal(updated_list)

        # case-4   FOR NODE 3
        dup_list = copy.deepcopy(copy_list)
        if dup_list[0][2] == 0:
            temp = dup_list[0][1]  # left shift from a22
            dup_list[0][1] = 0
            dup_list[0][2] = temp
            dis = self.hamming_distance(dup_list, dis)

            dup_list = copy.deepcopy(copy_list)
            temp2 = dup_list[1][2]
            dup_list[1][2] = 0  # down shift from a11
            dup_list[0][2] = temp2
            dis = self.hamming_distance(dup_list, dis)

            graph[x].append(updated_list)
            # print("hi")
            c = self.create_tuple(updated_list)
            parent[c] = [x]
            # print(updated_list,c)
            visited_node.append(updated_list)
            self.check_goal(updated_list)

        # case-5  " FOR NODE 4
        dup_list = copy.deepcopy(copy_list)
        if dup_list[1][0] == 0:
            temp = dup_list[0][0]  # up shift
            dup_list[0][0] = 0
            dup_list[1][0] = temp
            dis = self.hamming_distance(dup_list, dis)

            dup_list = copy.deepcopy(copy_list)
            temp1 = dup_list[2][0]  # down shift
            dup_list[2][0] = 0
            dup_list[1][0] = temp1
            dis = self.hamming_distance(dup_list, dis)

            dup_list = copy.deepcopy(copy_list)
            temp2 = dup_list[1][1]  # right shift
            dup_list[1][1] = 0
            dup_list[1][0] = temp2
            dis = self.hamming_distance(dup_list, dis)

            graph[x].append(updated_list)
            # print("hi")
            c = self.create_tuple(updated_list)
            parent[c] = [x]
            # print(updated_list,c)
            visited_node.append(updated_list)
            self.check_goal(updated_list)

        # case-6  "FOR NODE 6
        dup_list = copy.deepcopy(copy_list)
        if dup_list[1][2] == 0:
            temp2 = dup_list[0][2]  # up shift
            dup_list[0][2] = 0
            dup_list[1][2] = temp2
            dis = self.hamming_distance(dup_list, dis)

            dup_list = copy.deepcopy(copy_list)
            temp2 = dup_list[2][2]  # down shift
            dup_list[2][2] = 0
            dup_list[1][2] = temp2
            dis = self.hamming_distance(dup_list, dis)

            dup_list = copy.deepcopy(copy_list)
            temp2 = dup_list[1][1]  # right shift
            dup_list[1][1] = 0
            dup_list[1][2] = temp2
            dis = self.hamming_distance(dup_list, dis)

            graph[x].append(updated_list)
            # print("hi")
            c = self.create_tuple(updated_list)
            parent[c] = [x]
            # print(updated_list,c)
            visited_node.append(updated_list)
            self.check_goal(updated_list)

        # case 7     "FOR NODE 7
        dup_list = copy.deepcopy(copy_list)
        if dup_list[2][0] == 0:
            temp = dup_list[1][0]  # up shift
            dup_list[1][0] = 0
            dup_list[2][0] = temp
            dis = self.hamming_distance(dup_list, dis)

            dup_list = copy.deepcopy(copy_list)
            temp2 = dup_list[2][1]  # right shift
            dup_list[2][1] = 0
            dup_list[2][0] = temp2
            dis = self.hamming_distance(dup_list, dis)

            graph[x].append(updated_list)
            # print("hi")
            c = self.create_tuple(updated_list)
            parent[c] = [x]
            # print(updated_list,c)
            visited_node.append(updated_list)
            self.check_goal(updated_list)

        # case-8 " FOR NODE 8
        dup_list = copy.deepcopy(copy_list)
        if dup_list[2][1] == 0:
            temp2 = dup_list[2][2]  # right shift
            dup_list[2][2] = 0
            dup_list[2][1] = temp2
            print("dup", dup_list)
            dis = self.hamming_distance(dup_list, dis)

            dup_list = copy.deepcopy(copy_list)
            temp2 = dup_list[2][0]  # left shift
            dup_list[2][0] = 0
            dup_list[2][1] = temp2
            dis = self.hamming_distance(dup_list, dis)

            dup_list = copy.deepcopy(copy_list)
            temp2 = dup_list[1][1]  # up shift
            dup_list[1][1] = 0
            dup_list[2][1] = temp2
            dis = self.hamming_distance(dup_list, dis)

            graph[x].append(updated_list)
            # print("hi")
            c = self.create_tuple(updated_list)
            parent[c] = [x]
            # print(updated_list,c)
            visited_node.append(updated_list)
            self.check_goal(updated_list)

            print("jjj", graph)

        #  CASE-9  " FOR NODE 9
        dup_list = copy.deepcopy(copy_list)
        if dup_list[2][2] == 0:
            temp2 = dup_list[2][1]  # left shift
            dup_list[2][1] = 0
            dup_list[2][2] = temp2
            dis = self.hamming_distance(dup_list, dis)

            dup_list = copy.deepcopy(copy_list)
            temp2 = dup_list[1][2]  # up shift
            dup_list[1][2] = 0
            dup_list[2][2] = temp2
            dis = self.hamming_distance(dup_list, dis)

            graph[x].append(updated_list)
            # print("hi")
            c = self.create_tuple(updated_list)
            parent[c] = [x]
            # print(updated_list,c)
            visited_node.append(updated_list)
            self.check_goal(updated_list)
        print("skjdb",graph)
        i = visited_node.index(x)
        j = visited_node[i + 1]
        h = self.create_list(j)
        self.method(h)


hp = haming_8puzzle()
hp.method(inital_list)
sys.setrecursionlimit(50000)
